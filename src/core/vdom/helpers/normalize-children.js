/* @flow */

import VNode, { createTextVNode } from 'core/vdom/vnode'
import { isFalse, isTrue, isDef, isUndef, isPrimitive } from 'shared/util'

// 如果child包括了components，那么他就是一个函数式组件，当读到一个为数组的属性时则将这个数组返回
// 如果children中有一个是数组则将整个children作为参数组用concat连接，可以得到每个子元素都是vnode的children,这适用于只有一级嵌套数组的情况
export function simpleNormalizeChildren (children: any) {
  // 对数组进行扁平化 
  for (let i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

/*
首先遍历children，判断如果当前值c为数组，则递归调用当前normalizeArrayChildren函数，得到VNode 数组c。
有个优化，如果得到的c最后一个元素和res最后一个元素同为TextNode，则将这两个TextNode合并。然后把c push进res里。
2.判断c是否为基础类型，若为是，则对其处理
3.else里是正常的VNode，对c赋予key值并push


normalizeChildren 方法的调用场景有 2 种，一个场景是 render 函数是用户手写的，当 children 只有一个节点的时候，
Vue.js 从接口层面允许用户把 children 写成基础类型用来创建单个简单的文本节点，这种情况会调用 createTextVNode 创建一个文本节点的 VNode；
另一个场景是当编译 slot、v-for 的时候会产生嵌套数组的情况，会调用 normalizeArrayChildren 方法，
*/
export function normalizeChildren (children: any): ?Array<VNode> {
  // 判断是否基础类型，是：创建文本节点，否：判断是否数组，是：作normalizeArrayChildren处理
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

function isTextNode (node): boolean {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}
// normalizeArrayChildren函数中，主要完成的功能是判断children中的元素是不是数组，如果是的话，就递归调用数组，并将每个元素保存在数组中返回
function normalizeArrayChildren (children: any, nestedIndex?: string): Array<VNode> {
  const res = []
  let i, c, lastIndex, last
  for (i = 0; i < children.length; i++) {
    c = children[i]
    // 遍历children，当children[i]是空或者是布尔值,跳过该次循环
    if (isUndef(c) || typeof c === 'boolean') continue
    lastIndex = res.length - 1
    last = res[lastIndex]
    //  nested
    // 如果children[i]还是个数组，再对children[i]作normalizeArrayChildren处理
    if (Array.isArray(c)) {
      if (c.length > 0) {
        // 首先判断children中的元素是不是数组，是的话递归调用函数。如果第一个和最后一个都是文本节点的话，将其合并，优化。
        c = normalizeArrayChildren(c, `${nestedIndex || ''}_${i}`)
        // merge adjacent text nodes
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + (c[0]: any).text)
          c.shift()
        }
        res.push.apply(res, c)
      }
      // 判断该元素是不是基本类型。如果是，在判断最后一个结点是不是文本节点，是的话将其与该元素合并为一个文本节点。否则，把这个基本类型转换为文本节点(VNode)
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c)
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c))
      }
    } else {
      // 最后一种情况，该元素是一个VNode，先同样进行优化（合并第一个和最后一个节点），然后判断该节点的属性，最后将该节点加入到结果中。
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text)
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = `__vlist${nestedIndex}_${i}__`
        }
        res.push(c)
      }
    }
  }
  return res
}
